{"remainingRequest":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\rxjs\\_esm5\\internal\\observable\\iif.js","dependencies":[{"path":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\rxjs\\_esm5\\internal\\observable\\iif.js","mtime":1548987628275},{"path":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1548987609424},{"path":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1548987590941}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */\r\nimport { defer } from './defer';\r\nimport { EMPTY } from './empty';\r\n/**\r\n * Decides at subscription time which Observable will actually be subscribed.\r\n *\r\n * <span class=\"informal\">`If` statement for Observables.</span>\r\n *\r\n * `if` accepts a condition function and two Observables. When\r\n * an Observable returned by the operator is subscribed, condition function will be called.\r\n * Based on what boolean it returns at that moment, consumer will subscribe either to\r\n * the first Observable (if condition was true) or to the second (if condition was false). Condition\r\n * function may also not return anything - in that case condition will be evaluated as false and\r\n * second Observable will be subscribed.\r\n *\r\n * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that\r\n * was left undefined, resulting stream will simply complete immediately. That allows you to, rather\r\n * then controlling which Observable will be subscribed, decide at runtime if consumer should have access\r\n * to given Observable or not.\r\n *\r\n * If you have more complex logic that requires decision between more than two Observables, {@link defer}\r\n * will probably be a better choice. Actually `if` can be easily implemented with {@link defer}\r\n * and exists only for convenience and readability reasons.\r\n *\r\n *\r\n * @example <caption>Change at runtime which Observable will be subscribed</caption>\r\n * let subscribeToFirst;\r\n * const firstOrSecond = Rx.Observable.if(\r\n *   () => subscribeToFirst,\r\n *   Rx.Observable.of('first'),\r\n *   Rx.Observable.of('second')\r\n * );\r\n *\r\n * subscribeToFirst = true;\r\n * firstOrSecond.subscribe(value => console.log(value));\r\n *\r\n * // Logs:\r\n * // \"first\"\r\n *\r\n * subscribeToFirst = false;\r\n * firstOrSecond.subscribe(value => console.log(value));\r\n *\r\n * // Logs:\r\n * // \"second\"\r\n *\r\n *\r\n * @example <caption>Control an access to an Observable</caption>\r\n * let accessGranted;\r\n * const observableIfYouHaveAccess = Rx.Observable.if(\r\n *   () => accessGranted,\r\n *   Rx.Observable.of('It seems you have an access...') // Note that only one Observable is passed to the operator.\r\n * );\r\n *\r\n * accessGranted = true;\r\n * observableIfYouHaveAccess.subscribe(\r\n *   value => console.log(value),\r\n *   err => {},\r\n *   () => console.log('The end')\r\n * );\r\n *\r\n * // Logs:\r\n * // \"It seems you have an access...\"\r\n * // \"The end\"\r\n *\r\n * accessGranted = false;\r\n * observableIfYouHaveAccess.subscribe(\r\n *   value => console.log(value),\r\n *   err => {},\r\n *   () => console.log('The end')\r\n * );\r\n *\r\n * // Logs:\r\n * // \"The end\"\r\n *\r\n * @see {@link defer}\r\n *\r\n * @param {function(): boolean} condition Condition which Observable should be chosen.\r\n * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.\r\n * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.\r\n * @return {Observable} Either first or second Observable, depending on condition.\r\n * @static true\r\n * @name iif\r\n * @owner Observable\r\n */\r\nexport function iif(condition, trueResult, falseResult) {\r\n    if (trueResult === void 0) {\r\n        trueResult = EMPTY;\r\n    }\r\n    if (falseResult === void 0) {\r\n        falseResult = EMPTY;\r\n    }\r\n    return defer(function () { return condition() ? trueResult : falseResult; });\r\n}\r\n//# sourceMappingURL=iif.js.map\r\n",null]}