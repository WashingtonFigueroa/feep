{"remainingRequest":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\util\\isNumeric.js","dependencies":[{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\util\\isNumeric.js","mtime":1549240440907},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549240389071},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1549240333687}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */\r\nimport { isArray } from './isArray';\r\nexport function isNumeric(val) {\r\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\r\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\r\n    // subtraction forces infinities to NaN\r\n    // adding 1 corrects loss of precision from parseFloat (#15100)\r\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\r\n}\r\n//# sourceMappingURL=isNumeric.js.map\r\n",null]}