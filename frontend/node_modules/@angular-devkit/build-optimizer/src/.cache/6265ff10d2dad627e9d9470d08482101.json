{"remainingRequest":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\angular-plotly.js\\fesm5\\angular-plotly.js.js","dependencies":[{"path":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\angular-plotly.js\\fesm5\\angular-plotly.js.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1548987609424},{"path":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1548987590941}],"contextDependencies":[],"result":["import { __values, __awaiter, __generator, __assign } from 'tslib';\nimport { Injectable, NgModule, defineInjectable, EventEmitter, Component, IterableDiffers, KeyValueDiffers, ViewChild, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PlotlyService = /*@__PURE__*/ (function () {\n    function PlotlyService() {\n    }\n    /**\n     * @param {?} moduleName\n     * @return {?}\n     */\n    PlotlyService.setModuleName = /**\n     * @param {?} moduleName\n     * @return {?}\n     */\n        function (moduleName) {\n            PlotlyService._moduleName = moduleName;\n        };\n    /**\n     * @param {?} plotly\n     * @return {?}\n     */\n    PlotlyService.setPlotly = /**\n     * @param {?} plotly\n     * @return {?}\n     */\n        function (plotly) {\n            PlotlyService._plotly = plotly;\n        };\n    /**\n     * @param {?} instance\n     * @return {?}\n     */\n    PlotlyService.insert = /**\n     * @param {?} instance\n     * @return {?}\n     */\n        function (instance) {\n            /** @type {?} */\n            var index = PlotlyService.instances.indexOf(instance);\n            if (index === -1) {\n                PlotlyService.instances.push(instance);\n            }\n            return instance;\n        };\n    /**\n     * @param {?} div\n     * @return {?}\n     */\n    PlotlyService.remove = /**\n     * @param {?} div\n     * @return {?}\n     */\n        function (div) {\n            /** @type {?} */\n            var index = PlotlyService.instances.indexOf(div);\n            if (index >= 0) {\n                PlotlyService.instances.splice(index, 1);\n                PlotlyService._plotly.purge(div);\n            }\n        };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    PlotlyService.prototype.getInstanceByDivId = /**\n     * @param {?} id\n     * @return {?}\n     */\n        function (id) {\n            var e_1, _a;\n            try {\n                for (var _b = __values(PlotlyService.instances), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var instance = _c.value;\n                    if (instance && instance.id === id) {\n                        return instance;\n                    }\n                }\n            }\n            catch (e_1_1) {\n                e_1 = { error: e_1_1 };\n            }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return))\n                        _a.call(_b);\n                }\n                finally {\n                    if (e_1)\n                        throw e_1.error;\n                }\n            }\n            return undefined;\n        };\n    /**\n     * @return {?}\n     */\n    PlotlyService.prototype.getPlotly = /**\n     * @return {?}\n     */\n        function () {\n            if (typeof PlotlyService._plotly === 'undefined') {\n                /** @type {?} */\n                var msg = PlotlyService._moduleName === 'ViaCDN'\n                    ? \"Error loading Peer dependency plotly.js from CDN url\"\n                    : \"Peer dependency plotly.js isn't installed\";\n                throw new Error(msg);\n            }\n            return PlotlyService._plotly;\n        };\n    /**\n     * @protected\n     * @param {?} fn\n     * @return {?}\n     */\n    PlotlyService.prototype.waitFor = /**\n     * @protected\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            return new Promise(function (resolve) {\n                /** @type {?} */\n                var localFn = function () {\n                    fn() ? resolve() : setTimeout(localFn, 10);\n                };\n                localFn();\n            });\n        };\n    // tslint:disable max-line-length\n    // tslint:disable max-line-length\n    /**\n     * @param {?} div\n     * @param {?} data\n     * @param {?=} layout\n     * @param {?=} config\n     * @param {?=} frames\n     * @return {?}\n     */\n    PlotlyService.prototype.newPlot =\n        // tslint:disable max-line-length\n        /**\n         * @param {?} div\n         * @param {?} data\n         * @param {?=} layout\n         * @param {?=} config\n         * @param {?=} frames\n         * @return {?}\n         */\n        function (div, data, layout, config, frames) {\n            return __awaiter(this, void 0, void 0, function () {\n                var obj;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.waitFor(function () { return _this.getPlotly() !== 'waiting'; })];\n                        case 1:\n                            _a.sent();\n                            if (frames) {\n                                obj = { data: data, layout: layout, config: config, frames: frames };\n                                return [2 /*return*/, ((this.getPlotly().newPlot(div, obj).then(function () { return PlotlyService.insert(((div))); })))];\n                            }\n                            return [2 /*return*/, ((this.getPlotly().newPlot(div, data, layout, config).then(function () { return PlotlyService.insert(((div))); })))];\n                    }\n                });\n            });\n        };\n    /**\n     * @param {?} div\n     * @param {?} data\n     * @param {?=} layout\n     * @param {?=} config\n     * @param {?=} frames\n     * @return {?}\n     */\n    PlotlyService.prototype.plot = /**\n     * @param {?} div\n     * @param {?} data\n     * @param {?=} layout\n     * @param {?=} config\n     * @param {?=} frames\n     * @return {?}\n     */\n        function (div, data, layout, config, frames) {\n            if (frames) {\n                /** @type {?} */\n                var obj = { data: data, layout: layout, config: config, frames: frames };\n                return ((this.getPlotly().plot(div, obj)));\n            }\n            return ((this.getPlotly().plot(div, data, layout, config)));\n        };\n    /**\n     * @param {?} div\n     * @param {?} data\n     * @param {?=} layout\n     * @param {?=} config\n     * @param {?=} frames\n     * @return {?}\n     */\n    PlotlyService.prototype.update = /**\n     * @param {?} div\n     * @param {?} data\n     * @param {?=} layout\n     * @param {?=} config\n     * @param {?=} frames\n     * @return {?}\n     */\n        function (div, data, layout, config, frames) {\n            if (frames) {\n                /** @type {?} */\n                var obj = { data: data, layout: layout, config: config, frames: frames };\n                return ((this.getPlotly().react(div, obj)));\n            }\n            return ((this.getPlotly().react(div, data, layout, config)));\n        };\n    // tslint:enable max-line-length\n    // tslint:enable max-line-length\n    /**\n     * @param {?} div\n     * @return {?}\n     */\n    PlotlyService.prototype.resize =\n        // tslint:enable max-line-length\n        /**\n         * @param {?} div\n         * @return {?}\n         */\n        function (div) {\n            return this.getPlotly().Plots.resize(div);\n        };\n    PlotlyService.instances = [];\n    PlotlyService._plotly = undefined;\n    PlotlyService._moduleName = undefined;\n    /** @nocollapse */ PlotlyService.ngInjectableDef = defineInjectable({ factory: function PlotlyService_Factory() { return new PlotlyService(); }, token: PlotlyService, providedIn: \"root\" });\n    return PlotlyService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// @dynamic\nvar PlotComponent = /*@__PURE__*/ (function () {\n    function PlotComponent(plotly, iterableDiffers, keyValueDiffers) {\n        this.plotly = plotly;\n        this.iterableDiffers = iterableDiffers;\n        this.keyValueDiffers = keyValueDiffers;\n        this.defaultClassName = 'js-plotly-plot';\n        this.datarevision = 0;\n        this.revision = 0;\n        this.debug = false;\n        this.useResizeHandler = false;\n        this.initialized = new EventEmitter();\n        this.update = new EventEmitter();\n        this.purge = new EventEmitter();\n        this.error = new EventEmitter();\n        this.afterExport = new EventEmitter();\n        this.afterPlot = new EventEmitter();\n        this.animated = new EventEmitter();\n        this.animatingFrame = new EventEmitter();\n        this.animationInterrupted = new EventEmitter();\n        this.autoSize = new EventEmitter();\n        this.beforeExport = new EventEmitter();\n        this.buttonClicked = new EventEmitter();\n        this.click = new EventEmitter();\n        this.clickAnnotation = new EventEmitter();\n        this.deselect = new EventEmitter();\n        this.doubleClick = new EventEmitter();\n        this.framework = new EventEmitter();\n        this.hover = new EventEmitter();\n        this.legendClick = new EventEmitter();\n        this.legendDoubleClick = new EventEmitter();\n        this.relayout = new EventEmitter();\n        this.restyle = new EventEmitter();\n        this.redraw = new EventEmitter();\n        this.selected = new EventEmitter();\n        this.selecting = new EventEmitter();\n        this.sliderChange = new EventEmitter();\n        this.sliderEnd = new EventEmitter();\n        this.sliderStart = new EventEmitter();\n        this.transitioning = new EventEmitter();\n        this.transitionInterrupted = new EventEmitter();\n        this.unhover = new EventEmitter();\n        this.eventNames = ['afterExport', 'afterPlot', 'animated', 'animatingFrame', 'animationInterrupted', 'autoSize',\n            'beforeExport', 'buttonClicked', 'click', 'clickAnnotation', 'deselect', 'doubleClick', 'framework', 'hover',\n            'legendClick', 'legendDoubleClick', 'relayout', 'restyle', 'redraw', 'selected', 'selecting', 'sliderChange',\n            'sliderEnd', 'sliderStart', 'transitioning', 'transitionInterrupted', 'unhover'];\n    }\n    /**\n     * @return {?}\n     */\n    PlotComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.createPlot().then(function () {\n                /** @type {?} */\n                var figure = _this.createFigure();\n                _this.initialized.emit(figure);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    PlotComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (typeof this.resizeHandler === 'function') {\n                this.getWindow().removeEventListener('resize', ((this.resizeHandler)));\n                this.resizeHandler = undefined;\n            }\n            /** @type {?} */\n            var figure = this.createFigure();\n            this.purge.emit(figure);\n            PlotlyService.remove(this.plotlyInstance);\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    PlotComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            /** @type {?} */\n            var shouldUpdate = false;\n            /** @type {?} */\n            var revision = changes.revision;\n            if (revision && !revision.isFirstChange()) {\n                shouldUpdate = true;\n            }\n            /** @type {?} */\n            var debug = changes.debug;\n            if (debug && !debug.isFirstChange()) {\n                shouldUpdate = true;\n            }\n            if (shouldUpdate) {\n                this.updatePlot();\n            }\n            this.updateWindowResizeHandler();\n        };\n    /**\n     * @return {?}\n     */\n    PlotComponent.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var shouldUpdate = false;\n            if (this.layoutDiffer) {\n                /** @type {?} */\n                var layoutHasDiff = this.layoutDiffer.diff(this.layout);\n                if (layoutHasDiff) {\n                    shouldUpdate = true;\n                }\n            }\n            else if (this.layout) {\n                this.layoutDiffer = this.keyValueDiffers.find(this.layout).create();\n            }\n            else {\n                this.layoutDiffer = undefined;\n            }\n            if (this.dataDiffer) {\n                /** @type {?} */\n                var dataHasDiff = this.dataDiffer.diff(this.data);\n                if (dataHasDiff) {\n                    shouldUpdate = true;\n                }\n            }\n            else if (Array.isArray(this.data)) {\n                this.dataDiffer = this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy);\n            }\n            else {\n                this.dataDiffer = undefined;\n            }\n            if (shouldUpdate && this.plotlyInstance) {\n                this.datarevision += 1;\n                this.updatePlot();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    PlotComponent.prototype.getWindow = /**\n     * @return {?}\n     */\n        function () {\n            return window;\n        };\n    /**\n     * @return {?}\n     */\n    PlotComponent.prototype.getClassName = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var classes = [this.defaultClassName];\n            if (Array.isArray(this.className)) {\n                classes = classes.concat(this.className);\n            }\n            else if (this.className) {\n                classes.push(this.className);\n            }\n            return classes.join(' ');\n        };\n    /**\n     * @return {?}\n     */\n    PlotComponent.prototype.createPlot = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return this.plotly.newPlot(this.plotEl.nativeElement, this.data, this.layout, this.config, this.frames).then(function (plotlyInstance) {\n                _this.plotlyInstance = plotlyInstance;\n                _this.getWindow().gd = _this.debug ? plotlyInstance : undefined;\n                _this.eventNames.forEach(function (name) {\n                    /** @type {?} */\n                    var eventName = \"plotly_\" + name.toLowerCase();\n                    plotlyInstance.on(eventName, function (data) { return (((_this[name]))).emit(data); });\n                });\n                _this.updateWindowResizeHandler();\n            }, function (err) {\n                console.error('Error while plotting:', err);\n                _this.error.emit(err);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    PlotComponent.prototype.createFigure = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var p = this.plotlyInstance;\n            /** @type {?} */\n            var figure = {\n                data: p.data,\n                layout: p.layout,\n                frames: p._transitionData ? p._transitionData._frames : null\n            };\n            return figure;\n        };\n    /**\n     * @return {?}\n     */\n    PlotComponent.prototype.updatePlot = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.plotlyInstance) {\n                /** @type {?} */\n                var error = new Error(\"Plotly component wasn't initialized\");\n                this.error.emit(error);\n                throw error;\n            }\n            /** @type {?} */\n            var layout = __assign({ datarevision: this.datarevision }, this.layout);\n            return this.plotly.update(this.plotlyInstance, this.data, layout, this.config, this.frames).then(function () {\n                /** @type {?} */\n                var figure = _this.createFigure();\n                _this.update.emit(figure);\n            }, function (err) {\n                console.error('Error while updating plot:', err);\n                _this.error.emit(err);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    PlotComponent.prototype.updateWindowResizeHandler = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.useResizeHandler) {\n                if (this.resizeHandler === undefined) {\n                    this.resizeHandler = function () { return _this.plotly.resize(_this.plotlyInstance); };\n                    this.getWindow().addEventListener('resize', ((this.resizeHandler)));\n                }\n            }\n            else {\n                if (typeof this.resizeHandler === 'function') {\n                    this.getWindow().removeEventListener('resize', ((this.resizeHandler)));\n                    this.resizeHandler = undefined;\n                }\n            }\n        };\n    /**\n     * @param {?} _\n     * @param {?} item\n     * @return {?}\n     */\n    PlotComponent.prototype.dataDifferTrackBy = /**\n     * @param {?} _\n     * @param {?} item\n     * @return {?}\n     */\n        function (_, item) {\n            /** @type {?} */\n            var obj = Object.assign({}, item, { uid: '' });\n            return JSON.stringify(obj);\n        };\n    return PlotComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar SharedModule = /*@__PURE__*/ (function () {\n    function SharedModule() {\n    }\n    return SharedModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PlotlyModule = /*@__PURE__*/ (function () {\n    function PlotlyModule() {\n        if (!this.isValid()) {\n            /** @type {?} */\n            var msg = \"Invalid PlotlyJS object. Please check https://github.com/plotly/angular-plotly.js#quick-start\"\n                + \" to see how to add PlotlyJS to your project.\";\n            throw new Error(msg);\n        }\n        PlotlyService.setPlotly(PlotlyModule.plotlyjs);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    PlotlyModule.prototype.isValid = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            return PlotlyModule.plotlyjs !== undefined\n                && typeof PlotlyModule.plotlyjs.plot === 'function';\n        };\n    PlotlyModule.plotlyjs = {};\n    return PlotlyModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// @dynamic\nvar PlotlyViaCDNModule = /*@__PURE__*/ (function () {\n    function PlotlyViaCDNModule(plotlyService) {\n        this.plotlyService = plotlyService;\n        PlotlyService.setModuleName('ViaCDN');\n    }\n    Object.defineProperty(PlotlyViaCDNModule, \"plotlyVersion\", {\n        set: /**\n         * @param {?} version\n         * @return {?}\n         */ function (version) {\n            /** @type {?} */\n            var isOk = version === 'latest' || /^\\d\\.\\d{1,2}\\.\\d{1,2}$/.test(version);\n            if (!isOk) {\n                throw new Error(\"Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)\");\n            }\n            PlotlyViaCDNModule.loadViaCDN();\n            PlotlyViaCDNModule._plotlyVersion = version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PlotlyViaCDNModule, \"plotlyBundle\", {\n        set: /**\n         * @param {?} bundle\n         * @return {?}\n         */ function (bundle) {\n            /** @type {?} */\n            var isOk = bundle === null || PlotlyViaCDNModule.plotlyBundleNames.indexOf(bundle) >= 0;\n            if (!isOk) {\n                /** @type {?} */\n                var names = PlotlyViaCDNModule.plotlyBundleNames.map(function (n) { return \"\\\"\" + n + \"\\\"\"; }).join(', ');\n                throw new Error(\"Invalid plotly bundle. Please set to null for full or \" + names + \" for a partial bundle.\");\n            }\n            PlotlyViaCDNModule._plotlyBundle = bundle;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    PlotlyViaCDNModule.loadViaCDN = /**\n     * @return {?}\n     */\n        function () {\n            PlotlyService.setPlotly('waiting');\n            /** @type {?} */\n            var init = function () {\n                /** @type {?} */\n                var src = PlotlyViaCDNModule._plotlyBundle == null\n                    ? \"https://cdn.plot.ly/plotly-\" + PlotlyViaCDNModule._plotlyVersion + \".min.js\"\n                    : \"https://cdn.plot.ly/plotly-\" + PlotlyViaCDNModule._plotlyBundle + \"-\" + PlotlyViaCDNModule._plotlyVersion + \".min.js\";\n                /** @type {?} */\n                var script = document.createElement('script');\n                script.type = 'text/javascript';\n                script.src = src;\n                script.onerror = function () { return console.error(\"Error loading plotly.js library from \" + src); };\n                /** @type {?} */\n                var head = document.getElementsByTagName('head')[0];\n                head.appendChild(script);\n                /** @type {?} */\n                var counter = 200;\n                // equivalent of 10 seconds...\n                /** @type {?} */\n                var fn = function () {\n                    /** @type {?} */\n                    var plotly = (((window))).Plotly;\n                    if (plotly) {\n                        PlotlyService.setPlotly(plotly);\n                    }\n                    else if (counter > 0) {\n                        counter--;\n                        setTimeout(fn, 50);\n                    }\n                    else {\n                        throw new Error(\"Error loading plotly.js library from \" + src + \". Timeout.\");\n                    }\n                };\n                fn();\n            };\n            setTimeout(init);\n        };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    PlotlyViaCDNModule.forRoot = /**\n     * @param {?} config\n     * @return {?}\n     */\n        function (config) {\n            /** @type {?} */\n            var url = \"https://github.com/plotly/angular-plotly.js#customizing-the-plotlyjs-bundle\";\n            throw new Error(\"[PlotlyViaCDNModule] forRoot method is deprecated. Please see: \" + url);\n        };\n    PlotlyViaCDNModule._plotlyBundle = null;\n    PlotlyViaCDNModule._plotlyVersion = 'latest';\n    PlotlyViaCDNModule.plotlyBundleNames = ['basic', 'cartesian', 'geo', 'gl3d', 'gl2d', 'mapbox', 'finance'];\n    return PlotlyViaCDNModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PlotlyViaWindowModule = /*@__PURE__*/ (function () {\n    function PlotlyViaWindowModule() {\n        /** @type {?} */\n        var plotly = (((window))).Plotly;\n        if (typeof plotly === 'undefined') {\n            throw new Error(\"Plotly object not found on window.\");\n        }\n        PlotlyService.setPlotly(plotly);\n    }\n    /**\n     * @return {?}\n     */\n    PlotlyViaWindowModule.forRoot = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var url = \"https://github.com/plotly/angular-plotly.js#plotly-via-window-module\";\n            throw new Error(\"[PlotlyViaWindowModule] forRoot method is deprecated. Please see: \" + url);\n        };\n    return PlotlyViaWindowModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { PlotlyModule, PlotlyViaCDNModule, PlotlyViaWindowModule, PlotComponent, PlotlyService, SharedModule as ɵa };\n//# sourceMappingURL=angular-plotly.js.js.map \n",null]}