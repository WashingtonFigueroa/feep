{"remainingRequest":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\observable\\bindCallback.js","dependencies":[{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\observable\\bindCallback.js","mtime":1549240439689},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549240389071},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1549240333687}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isArray,_util_isScheduler PURE_IMPORTS_END */\r\nimport { Observable } from '../Observable';\r\nimport { AsyncSubject } from '../AsyncSubject';\r\nimport { map } from '../operators/map';\r\nimport { isArray } from '../util/isArray';\r\nimport { isScheduler } from '../util/isScheduler';\r\n// tslint:enable:max-line-length\r\n/**\r\n * Converts a callback API to a function that returns an Observable.\r\n *\r\n * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\r\n * it will return a function `g` that when called as `g(x)` will output an\r\n * Observable.</span>\r\n *\r\n * `bindCallback` is not an operator because its input and output are not\r\n * Observables. The input is a function `func` with some parameters, the\r\n * last parameter must be a callback function that `func` calls when it is\r\n * done.\r\n *\r\n * The output of `bindCallback` is a function that takes the same parameters\r\n * as `func`, except the last one (the callback). When the output function\r\n * is called with arguments it will return an Observable. If function `func`\r\n * calls its callback with one argument the Observable will emit that value.\r\n * If on the other hand the callback is called with multiple values the resulting\r\n * Observable will emit an array with said values as arguments.\r\n *\r\n * It is very important to remember that input function `func` is not called\r\n * when the output function is, but rather when the Observable returned by the output\r\n * function is subscribed. This means if `func` makes an AJAX request, that request\r\n * will be made every time someone subscribes to the resulting Observable, but not before.\r\n *\r\n * The last optional parameter - {@link Scheduler} - can be used to control when the call\r\n * to `func` happens after someone subscribes to Observable, as well as when results\r\n * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\r\n * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\r\n * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\r\n * and call `subscribe` on the output Observable all function calls that are currently executing\r\n * will end before `func` is invoked.\r\n *\r\n * By default results passed to the callback are emitted immediately after `func` invokes the callback.\r\n * In particular, if the callback is called synchronously the subscription of the resulting Observable\r\n * will call the `next` function synchronously as well.  If you want to defer that call,\r\n * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\r\n * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\r\n *\r\n * Note that the Observable created by the output function will always emit a single value\r\n * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\r\n * calls will not appear in the stream. If you need to listen for multiple calls,\r\n *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\r\n *\r\n * If `func` depends on some context (`this` property) and is not already bound the context of `func`\r\n * will be the context that the output function has at call time. In particular, if `func`\r\n * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\r\n * it is recommended that the context of the output function is set to that object as well.\r\n *\r\n * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\r\n * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\r\n * provides convenient error handling and probably is a better choice.\r\n * `bindCallback` will treat such functions the same as any other and error parameters\r\n * (whether passed or not) will always be interpreted as regular callback argument.\r\n *\r\n *\r\n * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\r\n * // Suppose we have jQuery.getJSON('/my/url', callback)\r\n * var getJSONAsObservable = bindCallback(jQuery.getJSON);\r\n * var result = getJSONAsObservable('/my/url');\r\n * result.subscribe(x => console.log(x), e => console.error(e));\r\n *\r\n *\r\n * @example <caption>Receive an array of arguments passed to a callback</caption>\r\n * someFunction((a, b, c) => {\r\n *   console.log(a); // 5\r\n *   console.log(b); // 'some string'\r\n *   console.log(c); // {someProperty: 'someValue'}\r\n * });\r\n *\r\n * const boundSomeFunction = bindCallback(someFunction);\r\n * boundSomeFunction().subscribe(values => {\r\n *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\r\n * });\r\n *\r\n *\r\n * @example <caption>Compare behaviour with and without async Scheduler</caption>\r\n * function iCallMyCallbackSynchronously(cb) {\r\n *   cb();\r\n * }\r\n *\r\n * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);\r\n * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\r\n *\r\n * boundSyncFn().subscribe(() => console.log('I was sync!'));\r\n * boundAsyncFn().subscribe(() => console.log('I was async!'));\r\n * console.log('This happened...');\r\n *\r\n * // Logs:\r\n * // I was sync!\r\n * // This happened...\r\n * // I was async!\r\n *\r\n *\r\n * @example <caption>Use bindCallback on an object method</caption>\r\n * const boundMethod = bindCallback(someObject.methodWithCallback);\r\n * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\r\n * .subscribe(subscriber);\r\n *\r\n *\r\n * @see {@link bindNodeCallback}\r\n * @see {@link from}\r\n * @see {@link fromPromise}\r\n *\r\n * @param {function} func A function with a callback as the last parameter.\r\n * @param {Scheduler} [scheduler] The scheduler on which to schedule the\r\n * callbacks.\r\n * @return {function(...params: *): Observable} A function which returns the\r\n * Observable that delivers the same values the callback would deliver.\r\n * @name bindCallback\r\n */\r\nexport function bindCallback(callbackFunc, resultSelector, scheduler) {\r\n    if (resultSelector) {\r\n        if (isScheduler(resultSelector)) {\r\n            scheduler = resultSelector;\r\n        }\r\n        else {\r\n            // DEPRECATED PATH\r\n            return function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\r\n            };\r\n        }\r\n    }\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var context = this;\r\n        var subject;\r\n        var params = {\r\n            context: context,\r\n            subject: subject,\r\n            callbackFunc: callbackFunc,\r\n            scheduler: scheduler,\r\n        };\r\n        return new Observable(function (subscriber) {\r\n            if (!scheduler) {\r\n                if (!subject) {\r\n                    subject = new AsyncSubject();\r\n                    var handler = function () {\r\n                        var innerArgs = [];\r\n                        for (var _i = 0; _i < arguments.length; _i++) {\r\n                            innerArgs[_i] = arguments[_i];\r\n                        }\r\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\r\n                        subject.complete();\r\n                    };\r\n                    try {\r\n                        callbackFunc.apply(context, args.concat([handler]));\r\n                    }\r\n                    catch (err) {\r\n                        subject.error(err);\r\n                    }\r\n                }\r\n                return subject.subscribe(subscriber);\r\n            }\r\n            else {\r\n                var state = {\r\n                    args: args, subscriber: subscriber, params: params,\r\n                };\r\n                return scheduler.schedule(dispatch, 0, state);\r\n            }\r\n        });\r\n    };\r\n}\r\nfunction dispatch(state) {\r\n    var _this = this;\r\n    var self = this;\r\n    var args = state.args, subscriber = state.subscriber, params = state.params;\r\n    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;\r\n    var subject = params.subject;\r\n    if (!subject) {\r\n        subject = params.subject = new AsyncSubject();\r\n        var handler = function () {\r\n            var innerArgs = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                innerArgs[_i] = arguments[_i];\r\n            }\r\n            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\r\n            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\r\n        };\r\n        try {\r\n            callbackFunc.apply(context, args.concat([handler]));\r\n        }\r\n        catch (err) {\r\n            subject.error(err);\r\n        }\r\n    }\r\n    this.add(subject.subscribe(subscriber));\r\n}\r\nfunction dispatchNext(state) {\r\n    var value = state.value, subject = state.subject;\r\n    subject.next(value);\r\n    subject.complete();\r\n}\r\nfunction dispatchError(state) {\r\n    var err = state.err, subject = state.subject;\r\n    subject.error(err);\r\n}\r\n//# sourceMappingURL=bindCallback.js.map\r\n",null]}