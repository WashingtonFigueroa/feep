{"remainingRequest":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\observable\\fromEventPattern.js","dependencies":[{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\observable\\fromEventPattern.js","mtime":1549240439777},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549240389071},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1549240333687}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\r\nimport { Observable } from '../Observable';\r\nimport { isArray } from '../util/isArray';\r\nimport { isFunction } from '../util/isFunction';\r\nimport { map } from '../operators/map';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Creates an Observable from an API based on addHandler/removeHandler\r\n * functions.\r\n *\r\n * <span class=\"informal\">Converts any addHandler/removeHandler API to an\r\n * Observable.</span>\r\n *\r\n * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\r\n *\r\n * Creates an Observable by using the `addHandler` and `removeHandler`\r\n * functions to add and remove the handlers. The `addHandler` is\r\n * called when the output Observable is subscribed, and `removeHandler` is\r\n * called when the Subscription is unsubscribed.\r\n *\r\n * @example <caption>Emits clicks happening on the DOM document</caption>\r\n * function addClickHandler(handler) {\r\n *   document.addEventListener('click', handler);\r\n * }\r\n *\r\n * function removeClickHandler(handler) {\r\n *   document.removeEventListener('click', handler);\r\n * }\r\n *\r\n * var clicks = fromEventPattern(\r\n *   addClickHandler,\r\n *   removeClickHandler\r\n * );\r\n * clicks.subscribe(x => console.log(x));\r\n *\r\n * @see {@link from}\r\n * @see {@link fromEvent}\r\n *\r\n * @param {function(handler: Function): any} addHandler A function that takes\r\n * a `handler` function as argument and attaches it somehow to the actual\r\n * source of events.\r\n * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\r\n * takes a `handler` function as argument and removes it in case it was\r\n * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\r\n * removeHandler function will forward it.\r\n * @return {Observable<T>}\r\n * @name fromEventPattern\r\n */\r\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\r\n    if (resultSelector) {\r\n        // DEPRECATED PATH\r\n        return fromEventPattern(addHandler, removeHandler).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\r\n    }\r\n    return new Observable(function (subscriber) {\r\n        var handler = function () {\r\n            var e = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                e[_i] = arguments[_i];\r\n            }\r\n            return subscriber.next(e.length === 1 ? e[0] : e);\r\n        };\r\n        var retValue;\r\n        try {\r\n            retValue = addHandler(handler);\r\n        }\r\n        catch (err) {\r\n            subscriber.error(err);\r\n            return undefined;\r\n        }\r\n        if (!isFunction(removeHandler)) {\r\n            return undefined;\r\n        }\r\n        return function () { return removeHandler(handler, retValue); };\r\n    });\r\n}\r\n//# sourceMappingURL=fromEventPattern.js.map\r\n",null]}