{"remainingRequest":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\AsapAction.js","dependencies":[{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\AsapAction.js","mtime":1549240440213},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549240389071},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1549240333687}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Immediate } from '../util/Immediate';\r\nimport { AsyncAction } from './AsyncAction';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar AsapAction = /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(AsapAction, _super);\r\n    function AsapAction(scheduler, work) {\r\n        var _this = _super.call(this, scheduler, work) || this;\r\n        _this.scheduler = scheduler;\r\n        _this.work = work;\r\n        return _this;\r\n    }\r\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\r\n        if (delay === void 0) {\r\n            delay = 0;\r\n        }\r\n        // If delay is greater than 0, request as an async action.\r\n        if (delay !== null && delay > 0) {\r\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\r\n        }\r\n        // Push the action to the end of the scheduler queue.\r\n        scheduler.actions.push(this);\r\n        // If a microtask has already been scheduled, don't schedule another\r\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\r\n        // the current scheduled microtask id.\r\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\r\n    };\r\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\r\n        if (delay === void 0) {\r\n            delay = 0;\r\n        }\r\n        // If delay exists and is greater than 0, or if the delay is null (the\r\n        // action wasn't rescheduled) but was originally scheduled as an async\r\n        // action, then recycle as an async action.\r\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\r\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\r\n        }\r\n        // If the scheduler queue is empty, cancel the requested microtask and\r\n        // set the scheduled flag to undefined so the next AsapAction will schedule\r\n        // its own.\r\n        if (scheduler.actions.length === 0) {\r\n            Immediate.clearImmediate(id);\r\n            scheduler.scheduled = undefined;\r\n        }\r\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\r\n        return undefined;\r\n    };\r\n    return AsapAction;\r\n}(AsyncAction));\r\nexport { AsapAction };\r\n//# sourceMappingURL=AsapAction.js.map\r\n",null]}