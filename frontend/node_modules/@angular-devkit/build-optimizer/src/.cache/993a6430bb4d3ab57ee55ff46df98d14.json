{"remainingRequest":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\operators\\throttleTime.js","dependencies":[{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\operators\\throttleTime.js","mtime":1549240440149},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549240389071},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1549240333687}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Subscriber } from '../Subscriber';\r\nimport { async } from '../scheduler/async';\r\nimport { defaultThrottleConfig } from './throttle';\r\n/**\r\n * Emits a value from the source Observable, then ignores subsequent source\r\n * values for `duration` milliseconds, then repeats this process.\r\n *\r\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\r\n * next `duration` milliseconds.</span>\r\n *\r\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\r\n *\r\n * `throttleTime` emits the source Observable values on the output Observable\r\n * when its internal timer is disabled, and ignores source values when the timer\r\n * is enabled. Initially, the timer is disabled. As soon as the first source\r\n * value arrives, it is forwarded to the output Observable, and then the timer\r\n * is enabled. After `duration` milliseconds (or the time unit determined\r\n * internally by the optional `scheduler`) has passed, the timer is disabled,\r\n * and this process repeats for the next source value. Optionally takes a\r\n * {@link IScheduler} for managing timers.\r\n *\r\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.throttleTime(1000);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sampleTime}\r\n * @see {@link throttle}\r\n *\r\n * @param {number} duration Time to wait before emitting another value after\r\n * emitting the last value, measured in milliseconds or the time unit determined\r\n * internally by the optional `scheduler`.\r\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\r\n * managing the timers that handle the throttling.\r\n * @param {Object} config a configuration object to define `leading` and\r\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\r\n * @return {Observable<T>} An Observable that performs the throttle operation to\r\n * limit the rate of emissions from the source.\r\n * @method throttleTime\r\n * @owner Observable\r\n */\r\nexport function throttleTime(duration, scheduler, config) {\r\n    if (scheduler === void 0) {\r\n        scheduler = async;\r\n    }\r\n    if (config === void 0) {\r\n        config = defaultThrottleConfig;\r\n    }\r\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\r\n}\r\nvar ThrottleTimeOperator = /*@__PURE__*/ (function () {\r\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\r\n        this.duration = duration;\r\n        this.scheduler = scheduler;\r\n        this.leading = leading;\r\n        this.trailing = trailing;\r\n    }\r\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\r\n    };\r\n    return ThrottleTimeOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar ThrottleTimeSubscriber = (function (_super) {\r\n    tslib_1.__extends(ThrottleTimeSubscriber, _super);\r\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\r\n        var _this = _super.call(this, destination) || this;\r\n        _this.duration = duration;\r\n        _this.scheduler = scheduler;\r\n        _this.leading = leading;\r\n        _this.trailing = trailing;\r\n        _this._hasTrailingValue = false;\r\n        _this._trailingValue = null;\r\n        return _this;\r\n    }\r\n    ThrottleTimeSubscriber.prototype._next = function (value) {\r\n        if (this.throttled) {\r\n            if (this.trailing) {\r\n                this._trailingValue = value;\r\n                this._hasTrailingValue = true;\r\n            }\r\n        }\r\n        else {\r\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\r\n            if (this.leading) {\r\n                this.destination.next(value);\r\n            }\r\n        }\r\n    };\r\n    ThrottleTimeSubscriber.prototype._complete = function () {\r\n        if (this._hasTrailingValue) {\r\n            this.destination.next(this._trailingValue);\r\n            this.destination.complete();\r\n        }\r\n        else {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\r\n        var throttled = this.throttled;\r\n        if (throttled) {\r\n            if (this.trailing && this._hasTrailingValue) {\r\n                this.destination.next(this._trailingValue);\r\n                this._trailingValue = null;\r\n                this._hasTrailingValue = false;\r\n            }\r\n            throttled.unsubscribe();\r\n            this.remove(throttled);\r\n            this.throttled = null;\r\n        }\r\n    };\r\n    return ThrottleTimeSubscriber;\r\n}(Subscriber));\r\nfunction dispatchNext(arg) {\r\n    var subscriber = arg.subscriber;\r\n    subscriber.clearThrottle();\r\n}\r\n//# sourceMappingURL=throttleTime.js.map\r\n",null]}