{"remainingRequest":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\rxjs\\_esm5\\internal\\observable\\defer.js","dependencies":[{"path":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\rxjs\\_esm5\\internal\\observable\\defer.js","mtime":1548987628262},{"path":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1548987609424},{"path":"C:\\wamp64\\www\\DTMOWED\\feep\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1548987590941}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\r\nimport { Observable } from '../Observable';\r\nimport { from } from './from'; // lol\r\nimport { empty } from './empty';\r\n/**\r\n * Creates an Observable that, on subscribe, calls an Observable factory to\r\n * make an Observable for each new Observer.\r\n *\r\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\r\n * is subscribed.\r\n * </span>\r\n *\r\n * <img src=\"./img/defer.png\" width=\"100%\">\r\n *\r\n * `defer` allows you to create the Observable only when the Observer\r\n * subscribes, and create a fresh Observable for each Observer. It waits until\r\n * an Observer subscribes to it, and then it generates an Observable,\r\n * typically with an Observable factory function. It does this afresh for each\r\n * subscriber, so although each subscriber may think it is subscribing to the\r\n * same Observable, in fact each subscriber gets its own individual\r\n * Observable.\r\n *\r\n * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\r\n * var clicksOrInterval = Rx.Observable.defer(function () {\r\n *   if (Math.random() > 0.5) {\r\n *     return Rx.Observable.fromEvent(document, 'click');\r\n *   } else {\r\n *     return Rx.Observable.interval(1000);\r\n *   }\r\n * });\r\n * clicksOrInterval.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following behavior:\r\n * // If the result of Math.random() is greater than 0.5 it will listen\r\n * // for clicks anywhere on the \"document\"; when document is clicked it\r\n * // will log a MouseEvent object to the console. If the result is less\r\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\r\n *\r\n * @see {@link create}\r\n *\r\n * @param {function(): SubscribableOrPromise} observableFactory The Observable\r\n * factory function to invoke for each Observer that subscribes to the output\r\n * Observable. May also return a Promise, which will be converted on the fly\r\n * to an Observable.\r\n * @return {Observable} An Observable whose Observers' subscriptions trigger\r\n * an invocation of the given Observable factory function.\r\n * @static true\r\n * @name defer\r\n * @owner Observable\r\n */\r\nexport function defer(observableFactory) {\r\n    return new Observable(function (subscriber) {\r\n        var input;\r\n        try {\r\n            input = observableFactory();\r\n        }\r\n        catch (err) {\r\n            subscriber.error(err);\r\n            return undefined;\r\n        }\r\n        var source = input ? from(input) : empty();\r\n        return source.subscribe(subscriber);\r\n    });\r\n}\r\n//# sourceMappingURL=defer.js.map\r\n",null]}