{"remainingRequest":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\observable\\throwError.js","dependencies":[{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\rxjs\\_esm5\\internal\\observable\\throwError.js","mtime":1549240439831},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549240389071},{"path":"C:\\Users\\HP User\\Documents\\trabajos\\washington\\fepp\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1549240333687}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\r\nimport { Observable } from '../Observable';\r\n/**\r\n * Creates an Observable that emits no items to the Observer and immediately\r\n * emits an error notification.\r\n *\r\n * <span class=\"informal\">Just emits 'error', and nothing else.\r\n * </span>\r\n *\r\n * <img src=\"./img/throw.png\" width=\"100%\">\r\n *\r\n * This static operator is useful for creating a simple Observable that only\r\n * emits the error notification. It can be used for composing with other\r\n * Observables, such as in a {@link mergeMap}.\r\n *\r\n * @example <caption>Emit the number 7, then emit an error.</caption>\r\n * import { throwError, concat, of } from 'rxjs/create';\r\n *\r\n * const result = concat(of(7), throwError(new Error('oops!')));\r\n * result.subscribe(x => console.log(x), e => console.error(e));\r\n *\r\n * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\r\n * import { throwError, interval, of } from 'rxjs/create';\r\n * import { mergeMap } from 'rxjs/operators';\r\n *\r\n * interval(1000).pipe(\r\n *   mergeMap(x => x === 13 ?\r\n *     throwError('Thirteens are bad') :\r\n *     of('a', 'b', 'c')\r\n *   )\r\n * ).subscribe(x => console.log(x), e => console.error(e));\r\n *\r\n * @see {@link create}\r\n * @see {@link empty}\r\n * @see {@link never}\r\n * @see {@link of}\r\n *\r\n * @param {any} error The particular Error to pass to the error notification.\r\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\r\n * the emission of the error notification.\r\n * @return {Observable} An error Observable: emits only the error notification\r\n * using the given error argument.\r\n * @static true\r\n * @name throw\r\n * @owner Observable\r\n */\r\nexport function throwError(error, scheduler) {\r\n    if (!scheduler) {\r\n        return new Observable(function (subscriber) { return subscriber.error(error); });\r\n    }\r\n    else {\r\n        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });\r\n    }\r\n}\r\nfunction dispatch(_a) {\r\n    var error = _a.error, subscriber = _a.subscriber;\r\n    subscriber.error(error);\r\n}\r\n//# sourceMappingURL=throwError.js.map\r\n",null]}